/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

module String;

mutable class StringIterator private (
  // This object is manipulated by the native methods directly.  It's important
  // that the fields match the native implementation
  // (String.cpp:StringIterator).
  private s: String,
  private mutable i: Int,
) extends Iterator<Char> uses Equality {
  static fun make(s: String): mutable StringIterator {
    mutable StringIterator(s, 0)
  }

  readonly fun chill(): this {
    static(this.s, this.i)
  }

  static fun makeEnd(s: String): mutable StringIterator {
    mutable StringIterator(s, s.utf8().size())
  }

  readonly fun clone(): mutable StringIterator {
    mutable StringIterator(this.s, this.i);
  }

  mutable fun assign(other: readonly StringIterator): void {
    invariant(
      this.s == other.s,
      "Cannot assign from different string iterator",
    );
    this.!i = other.i;
  }

  private static fun charFromCodeOpt(code: Int): ?Char {
    if (code == -1) {
      None()
    } else {
      Some(Char::fromCode(code))
    }
  }

  readonly fun sizeHint(): ?Int {
    None()
  }

  readonly fun current(): ?Char {
    static::charFromCodeOpt(this.rawCurrent());
  }

  readonly fun atEnd(): Bool {
    this.current().isNone()
  }

  mutable fun next(): ?Char {
    static::charFromCodeOpt(this.rawNext());
  }

  mutable fun prev(): ?Char {
    static::charFromCodeOpt(this.rawPrev());
  }

  mutable fun drop(n: Int): mutable StringIterator {
    this.rawDrop(n);
    this
  }

  @cpp_runtime
  native readonly fun substring(end: readonly StringIterator): String;

  @cpp_runtime
  private native readonly fun rawCurrent(): Int;
  @cpp_runtime
  private mutable native fun rawNext(): Int;
  @cpp_runtime
  private mutable native fun rawPrev(): Int;
  @cpp_runtime
  private mutable native fun rawDrop(n: Int): void;

  readonly fun <(other: readonly StringIterator): Bool {
    this.i < other.i
  }

  readonly fun >(other: readonly StringIterator): Bool {
    this.i > other.i
  }

  readonly fun ==(other: readonly StringIterator): Bool {
    this.i == other.i
  }
}
