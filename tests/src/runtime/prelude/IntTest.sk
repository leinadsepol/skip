value class ShiftTest(
  n: Int,
  count: Int,
  shlExpected: Int,
  shrsExpected: Int,
  shruExpected: Int,
)

@no_inline
fun ctz(n: Int): Int {
  n.ctz()
}

@no_inline
fun clz(n: Int): Int {
  n.clz()
}

@no_inline
fun popcount(n: Int): Int {
  n.popcount()
}

@test
fun testToString(): void {
  assertEqual((0).toString(), "0");
  assertEqual((1234567890).toString(), "1234567890");
  assertEqual(Int::max.toString(), "9223372036854775807");
  assertEqual(Int::min.toString(), "-9223372036854775808");
  void
}

@test
fun testStringToInt(): void {
  assertEqual("0".toInt(), 0);
  assertEqual("1234567890".toInt(), 1234567890);
  assertEqual("-1234567890".toInt(), -1234567890);
  assertEqual("9223372036854775807".toInt(), Int::max);
  assertEqual("-9223372036854775808".toInt(), Int::min);
  assertThrows(() -> "".toInt());
  assertThrows(() -> "-0".toInt());
  assertThrows(() -> "01".toInt());
  assertThrows(() -> "00".toInt());
  assertThrows(() -> "42x".toInt());
  assertThrows(() -> "x42".toInt());
  assertThrows(() -> "0x42".toInt());
  assertThrows(() -> "--5".toInt());
  assertThrows(() -> "9223372036854775808".toInt());
  assertThrows(() -> "-9223372036854775809".toInt());
  void
}

@test
fun testToStringBinary(): void {
  assertEqual((0).toStringBinary(), "0".repeat(64));
  assertEqual(
    (1234567890).toStringBinary(),
    "0000000000000000000000000000000001001001100101100000001011010010",
  );
  assertEqual(
    Int::max.toStringBinary(),
    "0111111111111111111111111111111111111111111111111111111111111111",
  );
  assertEqual(
    Int::min.toStringBinary(),
    "1000000000000000000000000000000000000000000000000000000000000000",
  );
}

@test
fun testToStringHex(): void {
  assertEqual((0x0000000000000000).toStringHex(), "0000000000000000");
  assertEqual((0x0123456789ABCDEF).toStringHex(), "0123456789abcdef");
  assertEqual((0xFFFFFFFFFFFFFFFF).toStringHex(), "ffffffffffffffff");
  assertEqual((0x8000000000000000).toStringHex(), "8000000000000000");
  assertEqual((0x0000000000000001).toStringHex(), "0000000000000001");
}

@test
fun testBits(): void {
  assertEqual(0.ctz(), 64);
  assertEqual(ctz(0), 64);
  assertEqual(1.ctz(), 0);
  assertEqual(ctz(1), 0);
  assertEqual(0x100.ctz(), 8);
  assertEqual(ctz(0x100), 8);
  assertEqual(Int::min.ctz(), 63);
  assertEqual(ctz(Int::min), 63);

  assertEqual(0.clz(), 64);
  assertEqual(clz(0), 64);
  assertEqual(0x100.clz(), 55);
  assertEqual(clz(0x100), 55);
  assertEqual(Int::min.clz(), 0);
  assertEqual(clz(Int::min), 0);
  assertEqual(1.clz(), 63);
  assertEqual(clz(1), 63);

  assertEqual(0.popcount(), 0);
  assertEqual(popcount(0), 0);
  assertEqual(0x33.popcount(), 4);
  assertEqual(popcount(0x33), 4);
  assertEqual((-1).popcount(), 64);
  assertEqual(popcount(-1), 64);
}

@test
fun testRoundTrip(): void {
  QuickCheck.assert(Int::generator(), i ~> {
    assertEqual(i.toString().toInt(), i)
  });
}

@test
fun testBitwiseShift(): void {
  // Cases for left, arithmetic right, logical right.
  cases = Array[
    ShiftTest(
      -9223372036854775808,
      0,
      -9223372036854775808,
      -9223372036854775808,
      -9223372036854775808,
    ),
    ShiftTest(
      -9223372036854775808,
      1,
      0,
      -4611686018427387904,
      4611686018427387904,
    ),
    ShiftTest(-9223372036854775808, 31, 0, -4294967296, 4294967296),
    ShiftTest(-9223372036854775808, 32, 0, -2147483648, 2147483648),
    ShiftTest(-9223372036854775808, 33, 0, -1073741824, 1073741824),
    ShiftTest(-9223372036854775808, 62, 0, -2, 2),
    ShiftTest(-9223372036854775808, 63, 0, -1, 1),
    ShiftTest(
      -4611686018427387904,
      0,
      -4611686018427387904,
      -4611686018427387904,
      -4611686018427387904,
    ),
    ShiftTest(
      -4611686018427387904,
      1,
      -9223372036854775808,
      -2305843009213693952,
      6917529027641081856,
    ),
    ShiftTest(-4611686018427387904, 31, 0, -2147483648, 6442450944),
    ShiftTest(-4611686018427387904, 32, 0, -1073741824, 3221225472),
    ShiftTest(-4611686018427387904, 33, 0, -536870912, 1610612736),
    ShiftTest(-4611686018427387904, 62, 0, -1, 3),
    ShiftTest(-4611686018427387904, 63, 0, -1, 1),
    ShiftTest(-6442450944, 0, -6442450944, -6442450944, -6442450944),
    ShiftTest(-6442450944, 1, -12884901888, -3221225472, 9223372033633550336),
    ShiftTest(-6442450944, 31, 4611686018427387904, -3, 8589934589),
    ShiftTest(-6442450944, 32, -9223372036854775808, -2, 4294967294),
    ShiftTest(-6442450944, 33, 0, -1, 2147483647),
    ShiftTest(-6442450944, 62, 0, -1, 3),
    ShiftTest(-6442450944, 63, 0, -1, 1),
    ShiftTest(-4294967296, 0, -4294967296, -4294967296, -4294967296),
    ShiftTest(-4294967296, 1, -8589934592, -2147483648, 9223372034707292160),
    ShiftTest(-4294967296, 31, -9223372036854775808, -2, 8589934590),
    ShiftTest(-4294967296, 32, 0, -1, 4294967295),
    ShiftTest(-4294967296, 33, 0, -1, 2147483647),
    ShiftTest(-4294967296, 62, 0, -1, 3),
    ShiftTest(-4294967296, 63, 0, -1, 1),
    ShiftTest(-2147483648, 0, -2147483648, -2147483648, -2147483648),
    ShiftTest(-2147483648, 1, -4294967296, -1073741824, 9223372035781033984),
    ShiftTest(-2147483648, 31, -4611686018427387904, -1, 8589934591),
    ShiftTest(-2147483648, 32, -9223372036854775808, -1, 4294967295),
    ShiftTest(-2147483648, 33, 0, -1, 2147483647),
    ShiftTest(-2147483648, 62, 0, -1, 3),
    ShiftTest(-2147483648, 63, 0, -1, 1),
    ShiftTest(-99, 0, -99, -99, -99),
    ShiftTest(-99, 1, -198, -50, 9223372036854775758),
    ShiftTest(-99, 31, -212600881152, -1, 8589934591),
    ShiftTest(-99, 32, -425201762304, -1, 4294967295),
    ShiftTest(-99, 33, -850403524608, -1, 2147483647),
    ShiftTest(-99, 62, 4611686018427387904, -1, 3),
    ShiftTest(-99, 63, -9223372036854775808, -1, 1),
    ShiftTest(-1, 0, -1, -1, -1),
    ShiftTest(-1, 1, -2, -1, 9223372036854775807),
    ShiftTest(-1, 31, -2147483648, -1, 8589934591),
    ShiftTest(-1, 32, -4294967296, -1, 4294967295),
    ShiftTest(-1, 33, -8589934592, -1, 2147483647),
    ShiftTest(-1, 62, -4611686018427387904, -1, 3),
    ShiftTest(-1, 63, -9223372036854775808, -1, 1),
    ShiftTest(0, 0, 0, 0, 0),
    ShiftTest(0, 1, 0, 0, 0),
    ShiftTest(0, 31, 0, 0, 0),
    ShiftTest(0, 32, 0, 0, 0),
    ShiftTest(0, 33, 0, 0, 0),
    ShiftTest(0, 62, 0, 0, 0),
    ShiftTest(0, 63, 0, 0, 0),
    ShiftTest(1, 0, 1, 1, 1),
    ShiftTest(1, 1, 2, 0, 0),
    ShiftTest(1, 31, 2147483648, 0, 0),
    ShiftTest(1, 32, 4294967296, 0, 0),
    ShiftTest(1, 33, 8589934592, 0, 0),
    ShiftTest(1, 62, 4611686018427387904, 0, 0),
    ShiftTest(1, 63, -9223372036854775808, 0, 0),
    ShiftTest(99, 0, 99, 99, 99),
    ShiftTest(99, 1, 198, 49, 49),
    ShiftTest(99, 31, 212600881152, 0, 0),
    ShiftTest(99, 32, 425201762304, 0, 0),
    ShiftTest(99, 33, 850403524608, 0, 0),
    ShiftTest(99, 62, -4611686018427387904, 0, 0),
    ShiftTest(99, 63, -9223372036854775808, 0, 0),
    ShiftTest(2147483648, 0, 2147483648, 2147483648, 2147483648),
    ShiftTest(2147483648, 1, 4294967296, 1073741824, 1073741824),
    ShiftTest(2147483648, 31, 4611686018427387904, 1, 1),
    ShiftTest(2147483648, 32, -9223372036854775808, 0, 0),
    ShiftTest(2147483648, 33, 0, 0, 0),
    ShiftTest(2147483648, 62, 0, 0, 0),
    ShiftTest(2147483648, 63, 0, 0, 0),
    ShiftTest(4294967296, 0, 4294967296, 4294967296, 4294967296),
    ShiftTest(4294967296, 1, 8589934592, 2147483648, 2147483648),
    ShiftTest(4294967296, 31, -9223372036854775808, 2, 2),
    ShiftTest(4294967296, 32, 0, 1, 1),
    ShiftTest(4294967296, 33, 0, 0, 0),
    ShiftTest(4294967296, 62, 0, 0, 0),
    ShiftTest(4294967296, 63, 0, 0, 0),
    ShiftTest(6442450944, 0, 6442450944, 6442450944, 6442450944),
    ShiftTest(6442450944, 1, 12884901888, 3221225472, 3221225472),
    ShiftTest(6442450944, 31, -4611686018427387904, 3, 3),
    ShiftTest(6442450944, 32, -9223372036854775808, 1, 1),
    ShiftTest(6442450944, 33, 0, 0, 0),
    ShiftTest(6442450944, 62, 0, 0, 0),
    ShiftTest(6442450944, 63, 0, 0, 0),
    ShiftTest(
      4611686018427387904,
      0,
      4611686018427387904,
      4611686018427387904,
      4611686018427387904,
    ),
    ShiftTest(
      4611686018427387904,
      1,
      -9223372036854775808,
      2305843009213693952,
      2305843009213693952,
    ),
    ShiftTest(4611686018427387904, 31, 0, 2147483648, 2147483648),
    ShiftTest(4611686018427387904, 32, 0, 1073741824, 1073741824),
    ShiftTest(4611686018427387904, 33, 0, 536870912, 536870912),
    ShiftTest(4611686018427387904, 62, 0, 1, 1),
    ShiftTest(4611686018427387904, 63, 0, 0, 0),
  ];

  // Try a bunch of value,shift combinations, and make sure all but the
  // low 6 bits of the shift count are igored.
  cases.each(c -> {
    Array[0, 64, -64].each(add -> {
      shift = c.count + add;
      assertEqual(c.n.shl(shift), c.shlExpected);
      assertEqual(c.n.shr(shift), c.shrsExpected);
      assertEqual(c.n.ushr(shift), c.shruExpected)
    })
  })
}
