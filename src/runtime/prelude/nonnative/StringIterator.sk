/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

module String;

mutable class StringIterator private (
  private s: String,
  private mutable i: Int,
  private length: Int,
) extends Iterator<Char> uses Equality {
  static fun make(s: String): mutable StringIterator {
    mutable StringIterator(s, 0, s.length())
  }

  static fun makeEnd(s: String): mutable StringIterator {
    len = s.length();
    mutable StringIterator(s, len, len)
  }

  readonly fun clone(): mutable StringIterator {
    mutable StringIterator(this.s, this.i, this.length);
  }

  mutable fun assign(other: readonly StringIterator): void {
    invariant(
      this.s == other.s,
      "Cannot assign from different string iterator",
    );
    this.!i = other.i;
  }

  mutable fun drop(n: Int): mutable StringIterator {
    invariant(n >= 0, "Called StringIterator::drop with negative number");
    this.!i = min(this.length, this.i + n);
    this
  }

  readonly fun sizeHint(): ?Int {
    Some(this.length - this.i)
  }

  readonly fun current(): ?Char {
    if (this.atEnd()) {
      None()
    } else {
      Some(this.s.unsafe_get(this.i));
    }
  }

  readonly fun atEnd(): Bool {
    this.i >= this.length
  }

  mutable fun next(): ?Char {
    result = this.current();
    if (result.isSome()) {
      this.!i = this.i + 1;
    };
    result
  }

  mutable fun prev(): ?Char {
    if (this.i == 0) {
      None()
    } else {
      this.!i = this.i - 1;
      this.current()
    }
  }

  readonly fun substring(end: readonly StringIterator): String {
    invariant(
      end.i >= this.i,
      "Called StringIterator::substring with end before start",
    );
    i = this.clone();
    gen: () -> mutable Iterator<Char> = () -> {
      while (i.i != end.i) {
        i.next() match {
        | Some(ch) -> yield ch
        | None() -> break void
        }
      }
    };
    String::fromChars(Array::createFromIterator(gen()))
  }

  readonly fun <(other: readonly StringIterator): Bool {
    this.i < other.i
  }

  readonly fun >(other: readonly StringIterator): Bool {
    this.i > other.i
  }

  readonly fun ==(other: readonly StringIterator): Bool {
    this.i == other.i
  }
}
